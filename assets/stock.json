<script>
  // 1) Paste your published CSV URL here:
  const SHEET_CSV_URL = 'https://docs.google.com/spreadsheets/d/XXXX/pub?output=csv';

  // 2) Minimal CSV parser (handles quotes & commas well enough for feeds)
  function parseCSV(text) {
    const rows = [];
    let i = 0, field = '', row = [], inQuotes = false;
    while (i < text.length) {
      const c = text[i], n = text[i+1];
      if (inQuotes) {
        if (c === '"' && n === '"') { field += '"'; i += 2; continue; }
        if (c === '"' ) { inQuotes = false; i++; continue; }
        field += c; i++; continue;
      } else {
        if (c === '"') { inQuotes = true; i++; continue; }
        if (c === ',') { row.push(field); field=''; i++; continue; }
        if (c === '\n' || c === '\r') {
          if (field.length || row.length) { row.push(field); rows.push(row); }
          field=''; row=[]; i++;
          if (c === '\r' && n === '\n') i++;
          continue;
        }
        field += c; i++;
      }
    }
    if (field.length || row.length) { row.push(field); rows.push(row); }
    return rows;
  }

  // 3) Convert CSV rows to the structure your site uses
  function mapRowsToItems(rows) {
    const [header, ...data] = rows;
    const idx = Object.fromEntries(header.map((h, i) => [h.trim(), i]));
    const get = (r, name) => (r[idx[name]] || '').trim();

    return data.map(r => {
      const images = [get(r,'image_1'), get(r,'image_2')].filter(Boolean);
      const price = get(r,'price');
      // Keep field names your JS already expects:
      return {
        id:              get(r,'id'),
        title:           get(r,'title'),
        price:           price ? Number(price.replace(/[^\d.]/g,'')) : null,
        category:        get(r,'category')?.toLowerCase(), // 'new' | 'used'
        sold:            /^true$/i.test(get(r,'sold')),
        type:            get(r,'type'),
        length:          get(r,'length'),
        sleeps:          get(r,'sleeps'),
        axleConfiguration:get(r,'axleConfiguration'),
        suspension:      get(r,'suspension'),
        weight:          get(r,'weight'),
        registered:      /^true$/i.test(get(r,'registered')),
        description:     get(r,'description_html'), // can be HTML
        thumbnail:       get(r,'thumbnail') || images[0] || '',
        images:          images,
        date_created:    new Date().toISOString(), // optional, for sorting
        // Helper used by cards:
        _firstPhotoId:   get(r,'thumbnail') || images[0] || ''
      };
    });
  }

  // 4) fileUrl() should accept full URLs (no Directus needed)
  const fileUrl = (url) => url || 'assets/placeholder.jpg';

  // ---- Use this wherever you previously loaded stock.json ----
  fetch(SHEET_CSV_URL, { cache:'no-store' })
    .then(r => r.text())
    .then(csv => {
      const items = mapRowsToItems(parseCSV(csv));
      // Now call your existing render code that expects `items`
      if (typeof render === 'function') {
        // stock.html
        window.__STOCK = items;
        render(items);
      } else {
        // caravan.html: find one by ?id=...
        const params = new URLSearchParams(location.search);
        const id = params.get('id');
        const it = items.find(x => String(x.id) === String(id));
        // Reuse your existing detail page population code as-is
        // (your current code that uses `it` can live below this)
        window.__STOCK_ONE = it;
        // If you need, you can trigger your existing code from here.
      }
    })
    .catch(err => console.error('Sheet load error:', err));
</script>
